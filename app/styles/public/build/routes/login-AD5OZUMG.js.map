{
  "version": 3,
  "sources": ["browser-route-module:/Volumes/Development/sites/remix-jokes/app/routes/login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["export { default, links } from \"/Volumes/Development/sites/remix-jokes/app/routes/login.tsx\";", "import type {LinksFunction, ActionFunction} from 'remix';\nimport {Link, useSearchParams, useActionData} from 'remix';\nimport {db} from '~/utils/db.server';\nimport stylesUrl from '../styles/login.css';\n\nexport let links: LinksFunction = () => {\n  return [{rel: 'stylesheet', href: stylesUrl}];\n};\n\nfunction validateUsername(username: unknown) {\n  if (typeof username !== 'string' || username.length < 3) {\n    return `Usernames must be at least 3 characters long`;\n  }\n}\n\nfunction validatePassword(password: string) {\n  if (typeof password !== 'string' || password.length < 6) {\n    return `Passwords must be at least six characters long`;\n  }\n}\n\ntype ActionData = {\n  formError?: string;\n  fieldErrors?: {\n    username: string | undefined;\n    password: string | undefined;\n  };\n  fields?: {\n    loginType: string;\n    username: string;\n    password: string;\n  };\n};\n\nexport let action: ActionFunction = async ({\n  request,\n}): Promise<Response | ActionData> => {\n  let form = await request.formData();\n  let loginType = form.get('loginType');\n  let username = form.get('username');\n  let password = form.get('password');\n  let redirectTo = form.get('redirectTo');\n\n  // we do this type check to be extra sure and to make TypeScript happy\n  if (\n    typeof loginType !== 'string' ||\n    typeof username !== 'string' ||\n    typeof password !== 'string' ||\n    typeof redirectTo !== 'string'\n  ) {\n    return {formError: `Form not submitted correctly.`};\n  }\n\n  let fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password),\n  };\n\n  let fields = {username, password, loginType};\n\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return {fieldErrors, fields};\n  }\n\n  switch (loginType) {\n    case 'login': {\n    }\n  }\n\n  // return redirect\n};\n\nexport default function Login() {\n  let [searchParams] = useSearchParams();\n  return (\n    <div className=\"container\">\n      <div className=\"content\" data-light=\"\">\n        <h1>Login</h1>\n        <form method=\"post\">\n          <input\n            type=\"hidden\"\n            name=\"redirectTo\"\n            value={searchParams.get('redirectTo') ?? undefined}\n          />\n          <fieldset>\n            <legend className=\"sr-only\">Login or Register?</legend>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"loginType\"\n                value=\"login\"\n                defaultChecked\n              />{' '}\n              Login\n            </label>\n            <label>\n              <input type=\"radio\" name=\"loginType\" value=\"register\" /> Register\n            </label>\n          </fieldset>\n          <div>\n            <label htmlFor=\"username-input\">Username</label>\n            <input type=\"text\" id=\"username-input\" name=\"username\" />\n          </div>\n          <div>\n            <label htmlFor=\"password-input\">Password</label>\n            <input id=\"password-input\" name=\"password\" type=\"password\" />\n          </div>\n          <button type=\"submit\" className=\"button\">\n            Submit\n          </button>\n        </form>\n      </div>\n      <div className=\"links\">\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/jokes\">Jokes</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;AAAA;;;ACAA;;;;;;AAKO,IAAI,QAAuB,MAAM;AACtC,SAAO,CAAC,EAAC,KAAK,cAAc,MAAM;AAAA;AAkErB,iBAAiB;AAxEhC;AAyEE,MAAI,CAAC,gBAAgB;AACrB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAU,cAAW;AAAA,KAClC,oCAAC,MAAD,MAAI,UACJ,oCAAC,QAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAO,mBAAa,IAAI,kBAAjB,YAAkC;AAAA,MAE3C,oCAAC,YAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KAAU,uBAC5B,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBAAc;AAAA,MACb,KAAI,UAGT,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAQ,MAAK;AAAA,IAAY,OAAM;AAAA,MAAa,eAG5D,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAO,IAAG;AAAA,IAAiB,MAAK;AAAA,OAE9C,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IAAO,IAAG;AAAA,IAAiB,MAAK;AAAA,IAAW,MAAK;AAAA,OAElD,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS,aAK7C,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD,MACE,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAI,UAEf,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAS;AAAA;",
  "names": []
}

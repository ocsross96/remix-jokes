{
  "version": 3,
  "sources": ["browser-route-module:/Volumes/Development/sites/remix-jokes/app/routes/jokes[.]rss.tsx?browser", "../../../app/routes/jokes[.]rss.tsx"],
  "sourcesContent": ["export * from \"/Volumes/Development/sites/remix-jokes/app/routes/jokes[.]rss.tsx\";", "import type { LoaderFunction } from 'remix';\nimport { db } from '~/utils/db.server';\n\nfunction escapeCdata(s: string) {\n  return s.replaceAll(']]>', ']]]]><![CDATA[>');\n}\n\nfunction escapeHtml(s: string) {\n  return s\n    .replaceAll('&', '&amp;')\n    .replaceAll('<', '&lt;')\n    .replaceAll('>', '&gt;')\n    .replaceAll('\"', '&quot;')\n    .replaceAll(\"'\", '&#039;');\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const jokes = await db.joke.findMany({\n    take: 100,\n    orderBy: { createdAt: 'desc' },\n    include: { jokester: { select: { username: true } } },\n  });\n\n  const host =\n    request.headers.get('X-Forwarded-Host') ?? request.headers.get('host');\n  if (!host) {\n    throw new Error('Could not determine domain URL.');\n  }\n  const protocol = host.includes('localhost') ? 'http' : 'https';\n  const domain = `${protocol}://${host}`;\n  const jokesUrl = `${domain}/jokes`;\n\n  const rssString = `\n    <rss xmlns:blogChannel=\"${jokesUrl}\" version=\"2.0\">\n      <channel>\n        <title>Remix Jokes</title>\n        <link>${jokesUrl}</link>\n        <description>Some funny jokes</description>\n        <language>en-us</language>\n        <generator>Kody the Koala</generator>\n        <ttl>40</ttl>\n        ${jokes\n          .map(joke =>\n            `\n            <item>\n              <title><![CDATA[${escapeCdata(joke.name)}]]></title>\n              <description><![CDATA[A funny joke called ${escapeHtml(\n                joke.name,\n              )}]]></description>\n              <author><![CDATA[${escapeCdata(\n                joke.jokester.username,\n              )}]]></author>\n              <pubDate>${joke.createdAt.toUTCString()}</pubDate>\n              <link>${jokesUrl}/${joke.id}</link>\n              <guid>${jokesUrl}/${joke.id}</guid>\n            </item>\n          `.trim(),\n          )\n          .join('\\n')}\n      </channel>\n    </rss>\n  `.trim();\n\n  return new Response(rssString, {\n    headers: {\n      'Cache-Control': `public, max-age=${60 * 10}, s-maxage=${60 * 60 * 24}`,\n      'Content-Type': 'application/xml',\n      'Content-Length': String(Buffer.byteLength(rssString)),\n    },\n  });\n};\n"],
  "mappings": ";;;;;;;;;AAAA;;;ACAA;AACA,gBAAmB;AAEnB,qBAAqB,GAAW;AAC9B,SAAO,EAAE,WAAW,OAAO;AAAA;AAG7B,oBAAoB,GAAW;AAC7B,SAAO,EACJ,WAAW,KAAK,SAChB,WAAW,KAAK,QAChB,WAAW,KAAK,QAChB,WAAW,KAAK,UAChB,WAAW,KAAK;AAAA;AAGd,IAAM,SAAyB,OAAO,EAAE,cAAc;AAhB7D;AAiBE,QAAM,QAAQ,MAAM,aAAG,KAAK,SAAS;AAAA,IACnC,MAAM;AAAA,IACN,SAAS,EAAE,WAAW;AAAA,IACtB,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU;AAAA;AAG7C,QAAM,OACJ,cAAQ,QAAQ,IAAI,wBAApB,YAA2C,QAAQ,QAAQ,IAAI;AACjE,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM;AAAA;AAElB,QAAM,WAAW,KAAK,SAAS,eAAe,SAAS;AACvD,QAAM,SAAS,GAAG,cAAc;AAChC,QAAM,WAAW,GAAG;AAEpB,QAAM,YAAY;AAAA,8BACU;AAAA;AAAA;AAAA,gBAGd;AAAA;AAAA;AAAA;AAAA;AAAA,UAKN,MACC,IAAI,UACH;AAAA;AAAA,gCAEoB,YAAY,KAAK;AAAA,0DACS,WAC1C,KAAK;AAAA,iCAEY,YACjB,KAAK,SAAS;AAAA,yBAEL,KAAK,UAAU;AAAA,sBAClB,YAAY,KAAK;AAAA,sBACjB,YAAY,KAAK;AAAA;AAAA,YAE3B,QAED,KAAK;AAAA;AAAA;AAAA,IAGZ;AAEF,SAAO,IAAI,SAAS,WAAW;AAAA,IAC7B,SAAS;AAAA,MACP,iBAAiB,mBAAmB,KAAK,gBAAgB,KAAK,KAAK;AAAA,MACnE,gBAAgB;AAAA,MAChB,kBAAkB,OAAO,OAAO,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
